Basic Computer Organization
- The CPU(stands for Central Processing Unit) (also reffered to as the processor or microprocessor)
- Working memory (usually reffered to as RAM(stands for Random Access Memory))
- Permanent storage (HDD, SSD, USB sticks and etc.)
- Peripherals (everything else)
- System bus (everything that is connected to the CPU conencts through a BUS, or SYSTEM BUS)

The common conceptual parts of a CPU are:
- Registers
- Control unit
- Arithmetic and logic unit
- Memory management unit
- Caches

Registers - tiny blocks of memory inside the processor itself. These are bits of data that the processor can access
directly without waiting. Essentially what happens is that programs load data from memory into the registers, then process
the data in the registers using various instructions, and then write the contents of those registers back out to memory.

The Control Unit - sets the pacing for the chip. It handles the coordination of all the different parts of the chip. It handles
the clock, which doesn't tell time, but is more like a drum beat of a pacemaker - it makes sure that everything operates at the
same speed.

the Arithmetic and Logic Unit (ALU) - where proccessing takes place. It does the additions, subtractions, comparisons, etc.
the ALU is normally wired so that basic operations can be done with registers extremly quickly (typically in a single clock cycle).

the Memory Management Unit - in a simple fashion, it manages the way that the processor sees and understands memory addresses.

Caches - A cache is a piece of memory that holds other memory closer to the CPU. For instance, instructions are usually carried
out in the same order that they are stored in memory. Therefore, rather than wait for the control unit to request the next instruction
and then wait for the instruction to arrive from main memory, the CPU can preload a segment of memory that it thinks will be
useful into a cache. That way, when the CPU asks for the next instruction, it doesn’t have to wait on the system bus to deliver
the instruction from memory - it can just read it directly from the cache. CPUs implement all sorts of caches, each of which cache
different things for different reasons, and even have different access speeds.


The Fetch-Execute Cycle - the way that the processor runs programms is through the fetch-execute cycle. The computer operates
by reading your program one instruction at a time. It knows which instruction to read through a special register known as
the Instruction Pointer (or IP), which is also known as the Program Counter (or PC).
The computer essentially runs an endless cycle of the following operations:
- Read the instruction form the memory address specified by the instruction pointer.
- Decode the instruction (i.e., figure out what the instruction means).
- Advance the instruction pointer to the next instruction.
- Perform the operation indicated by the instruction.
Each instruction is extremely limited in its operation. Available instructions do operations like the following:
- Load a value from memory into a register.
- Store a value from a register into memory.
- Do a single arithmetic operation.
- Compare two values.
- Go to a different location in the code (i.e., modify the instruction pointer) based on the result of a 
previous comparison.


The General-Purpose Registers
The x86-64 ISA has 16 general-purpose registers. In the general case, you can specify these
registers for the source or destination of many different instructions. Eight of those are
carried over from the 32-bit architecture. These eight are divided into two classes.
The first class of registers are four registers that we might call the computational
registers. These registers are %rax, %rbx, %rcx, and %rdx.
These registers are normally used for general computation. Additionally, the ability to access
individual bytes of the registers can come in handy, as a lot of data is organized around individual bytes.
For instance, %rbx has a 32-bit version called %ebx
embedded in it, which has the original %bx embedded in that, whose individual high and
low bytes can be referred to by %bh and %bl.

%rax: This is the accumulator. It is the most widely used general-­
purpose register for computation.

%rbx: This is known as the "base register." This is often used for
indexed addressing.

%rcx: This is known as the "counter register." It is historically used
for counts when doing repetitive code (loops).

%rdx: This is known as the "data register." It has some special
significance in certain arithmetic operations and input/output
operations and is also sometimes used in some instructions in
coordination with %rax, such as with the divq instruction.

The next four registers are still considered "general purpose" because they can be
used in computation, but they are actually focused on specific tasks. The first two (%rsi
and %rdi) can be safely for general purposes, but it is best to leave the others for their
special purpose. Note that, while each of these has a 32-bit and 16-bit version, you
cannot access any individual bytes in these registers. For instance, the %rdi register has
a 32-bit version (%edi) and a 16-bit version (%di), but there is no register that will give
me any individual bytes from this register.

%rsi: This is the "source index" register. It has special uses for
working with longer spans of memory.

%rdi: This is the "destination index" register. It is often used in
conjunction with %rsi for working with longer spans of memory.

%rbp: This is the "base pointer."

%rsp: This is the "stack pointer."

Finally, while the previous registers can trace their history back to the original 8086
chip that started it all, the x86-64 ISA gives us eight new general-purpose registers. These
are simply labeled as %r8 through %r15.
Even though these registers didn’t exist in previous versions of the ISA, these
registers also have 32-bit, 16-bit, and individual-byte versions. For instance, %r11 refers
to the whole 64-bit version of the register. However, you can refer to the 32-bit version by
specifying %r11d, the 16-bit version by specifying %r11w, and the least significant (low)
byte by specifying %r11b. Each of the new general-purpose registers can be accessed in
this way.


Some registers have a specific function that is maintained by the CPU itself.
These are the special-purpose registers.

%rip - Instruction Pointer. The instruction pointer simply points to the next memory location that the
processor is going to process an instruction from. This lets the CPU know where to pull
the next instruction from when the next clock cycle runs. During each instruction, the
CPU will increment the instruction pointer to point to the next instruction—the one
immediately after the current instruction. This register can be manipulated through jump instructions.
A jump instruction tells the computer to alter the flow of the program by setting the instruction pointer to a value
that is different from where the CPU was going to set it to. The most basic form of this
instruction is simply jmp, which tells the processor the address of the next instruction
you want to execute.

%eflags - special-purpose register (conditions for jump instructions)
Rather than thinking about %eflags as holding a single value, you usually think
about the different bits of %eflags separately. Each bit holds a true/false status of a
previous operation. Most of the bits of the %eflags register are for operating system usage and aren’t of
extreme concern to us. However, there are two flags that come in useful continually:
ZF: The zero flag is set to 1 if the result of the last arithmetic
operation was zero, or 0 if it was not.
CF: The carry flag is set to 1 if the result of the last arithmetic
operation resulted in a “carry”—that is, the result was bigger than
could be held in the destination register.
OF: The overflow flag tells us that if we were intending the
numbers to be used as signed numbers, we overflowed the values
and now the sign is wrong.
SF: The sign flag tells us whether the sign flag (the most significant
bit) of the result was set after the instruction. Note that this is
not the same as if the sign flag should have been set (i.e., in an
overflow condition).
What happens is that at the end of each arithmetic instruction (instructions like
addX, mulX, but not movX), the processor sets the value of these status bits in the %eflags
register. The typical way to make use of these flags is with a conditional jump statement. A
conditional jump statement will jump based on the configuration of particular flags. If
the condition matches, the jump will occur. Otherwise, the processor will just go to the
next instruction as if nothing happened. Common jump instructions include
jz: “Jump if Zero” (jump if the zero flag is set to 1).
jnz: “Jump if Not Zero” (jump if the zero flag is set to 0).
jc: “Jump if Carry” (jump if the carry flag is set to 1).
jnc: “Jump if No Carry” (jump if the carry flag is set to 0).


Comparisons
The cmpq instruction (and its relatives cmpb, cmpw, and cmpl) compares two numbers
to tell which one is larger or if they are both equal. Internally, it performs the comparison
by subtracting the numbers (but discarding the result rather than storing it) and then
setting the flags accordingly. Then, there are special jump instructions that read the flags
and know what that means in terms of which one was larger.
After the cmpq instruction sets the flags, there are corresponding jump instructions
that will test one or more of these flags to see whether or not it should jump. Given the
command cmpq ARG1, ARG2

UNSIGNED NUMBERS COMPARISON
je will jump if ARG2 equals ARG1.
jne will jump if ARG2 does not equal ARG1.
ja will jump if ARG2 is above (greater than) ARG1.
jae will jump if ARG2 is above (greater than) or equal to ARG1.
jb will jump if ARG2 is below (less than) than ARG1.
jbe will jump if ARG2 is below (less than) or equal to ARG1.

SIGNED NUMBERS COMPARISON (cmp instruction is the same, but different jump instructions
check different flags if you are treating the values as signed)
jl: Jump if ARG2 is less than ARG1.
jle: Jump if ARG2 is less than or equal to ARG1.
jg: Jump if ARG2 is greater than ARG1.
jge: Jump if ARG2 is greater than or equal to ARG1.

While the unsigned jump evaluations (i.e., ja and jb and friends) are usually
checking the carry flag (CF) and zero flag (ZF), the signed jump evaluations are also
checking the sign flag (SF) and the overflow flag (OF).


Addressing modes - An addressing mode is essentially the way that the CPU finds a value for an instruction.

General Addressing Mode Syntax
VALUE(BASEREG, IDXREG, MULTIPLIER)
In this, VALUE is a fixed value, BASEREG and IDXREG are registers, and MULTIPLIER is a
fixed multiplier, which can be 1, 2, 4, or 8 (it is 1 if left out).
The memory address that this refers to is calculated as follows:
address = VALUE + BASEREG + IDXREG * MULTIPLIER
If a piece is left out, it is assumed to be zero (except for MULTIPLIER, which is
assumed to be one).

Immediate mode: This is when we put the value of interest
directly in the instruction. For instance, in movq $5, %rax, the $
indicates that it should use immediate mode. That is, the value is
contained within the instruction itself.

Register mode: This is when we are referring to a register to find
or store a value. In movq $5, %rax, the %rax is a register.

Direct memory mode: This is when we are referring to a value by
its address. The address itself is part of the instruction. When we
do movq first_value, %rbx, first_value is a direct memory
address. (first_value just becomes a number when the assembler runs. It refers to the
particular memory location, and we are treating it as an address. However, if we added a dollar
sign in front of it, then it would be treated just as an immediate-mode number.)

Register indirect mode: In this addressing mode, a register
holds the value of the address to access. So, let’s say that %rbx held a memory address,
and we wanted to take the contents of that memory address and move it to %rax. The
command for this is movq (%rbx), %rax. If %rbx contains an invalid memory address,
you’ll either wind up with junk in %rax, or if the memory location just doesn’t exist at all,
it will cause an error and the program will abort.

Indexed mode: Here, VALUE represents the address of an array, and
IDXREG represents the index to the array, with MULTIPLIER
representing the size of each array element. BASEREG is left out.

Base pointer mode: This is also referred to as displacement
mode. In this mode, BASEREG is known as the base pointer, and
VALUE, rather than being an address, is a fixed offset from BASEREG
(either positive or negative—negative values are fully supported
here).

Base pointer indexed mode: This mode makes use of all of the
different components of the general formula. BASEREG is a register
that points to a location; the location is offset by VALUE and then
indexed by IDXREG, which is multiplied by MULTIPLIER.

.equ - constant

leaq - This instruction means "load effective address.". Rather than load the contents of the memory
at this location, will calculate the final address and store the address itself into the
destination register.

Since ASCII characters are single bytes, we can’t just deal with them like we
did with quadwords and just load them into a 64-bit register. The assembler will store
characters as bytes, and we will need to use the movb in order to get them to the right
place. Additionally, we will need to move the characters into the byte-sized registers—
%ah, %al, %bh, %bl, %ch, %cl, %dh, and %dl.


Endianness (order of bytes)
Little endian format - least significant byte is stored first. Let’s say that we have
a quadword in the following bits:
1000000011000000111000001111000011111000111111001111111011111111
This would be stored in memory as the following byte sequence:
1. 11111111
2. 11111110
3. 11111100
4. 11111000
5. 11110000
6. 11100000
7. 11000000
8. 10000000

Big endian format - most significant byte is stored first. This is also known
as network byte order because of its predominance in networking protocols.
Big endian is stored in memory in the following order:
1. 10000000
2. 11000000
3. 11100000
4. 11110000
5. 11111000
6. 11111100
7. 11111110
8. 11111111

THE X86-64 INSTRUCTION SET ARCHITECTURE IS A LITTLE ENDIAN INSTRUCTION SET.
There are several instruction families that can help with endianness and similar
byte-oriented operations (each of them having a suffix indicating the word size being
used):
xchg: This instruction exchanges values of its two operands. It’s
like a mov instruction, except that the values are copied to each
other, not just in one direction.
bswap: This instruction reverses the order of bytes in the
destination. bswapq %rax reverses the order of the bytes in %rax.
Note that there isn’t a version of this command that works on
word-size (16-bit) registers. This is because instead of writing
bswapw %ax, since the bytes of the 16-bit general-purpose registers
are available individually, you can get the same effect just by using
xchg and saying, for instance, xchgb %ax, %al.
ror: This rotates a value right by the specified number of bits.
rorq $16, %rcx rotates register %rcx to the right by 16 bits. In a
rotation, anything rotated all the way off to the right comes back in
on the left.
rol: This is the same as ror but rotates to the left.
shr: This shifts a value right by the specified number of bits. This
is identical to ror, except that the bits that get shifted all the way
off to the right do not come back in on the left, but instead zeroes
get shifted in on the left-hand side.
shl: This is the same as shr, but shifts to the left.

Signed Numbers and Bitwise Operations

The instruction to convert a positive value to a negative (and vice versa) is the neg
family of instructions. neg instructions take a single operand which is both the source
and destination of the operation. For instance, negq %rax will take the negative of %rax
and store it back into %rax.

If you needed bigger integers (i.e., more than 64 bits), it is fairly straightforward to
do with multiple registers and/or multiple memory locations. Let us say that you want to
work with 320-bit numbers (i.e., 5 quadwords big), and you wanted to add together two
320-bit signed numbers. The basic process for this would be the following:
1. Load the least significant 64 bits of each addend into registers.
2. Perform an addq instruction. This will perform an addition and set
the carry flags.
3. Store the result.
4. For the remaining bytes
(a). Load in the next least significant bytes of each value.
(b). Add them together with the adcq instruction. This instruction will not
only add the values together, it will take into account the carry flag (CF)
from the previous addition.
(c). Store the result.
5. After all the additions have occurred, check the overflow flag (OF)
to see the result was bigger than 320 what can be kept in 320 bits.
adcq - instruction not only adds the operands, it also adds the carry flag if it is set (and also sets
the carry flags if appropriate). Note that the overflow flag only needs to be checked at the
end. adc is setting it every time, but we only need to know the value at the very end.

AND: This operation compares two bits, and the result is 1 if both
bits are 1 and 0 otherwise. andb %al, %ab.
OR: This operation compares two bits, and the result is 1 if
either bit is 1 (or both bits are 1). orb(orq and etc.) %al, %ab.
NOT: This operation has a single operand and simply flips the bit(s)
(0 goes to 1 and 1 goes to 0). This is accomplished with the not
family of instructions. notb %al will reverse all of the bits of %al.
XOR: This means exclusive or. This is similar to OR except that if
both values are 1, the result is 0. This is accomplished with the xor
family of instructions.
NOR: A “nor” operation is the opposite of an “or” operation.
Basically, whenever an “or” would return 1, the nor returns 0, and
vice versa.
NOT: The “not” operation only takes one operand. It simply
returns the opposite bit for each bit position. If the bit was a 1, it
returns 0. If it was a 0, it returns 1.
There are a lot of uses for these instructions, but some typical uses are listed as follows:
- The andq instruction is used for masking bits. That is, if there is a
subset of bits we are interested in, we can use the andq instruction to
set all other bits to zero. For instance, if I wanted to know the low-­
order three bits of register %rcx, I could do it with the instruction andq
$0b111, %rcx.
- Many operations take an operand which has a set of “bit flags.” That
is, each individual bit within a single quadword has a meaning.
You can combine individual flags using the orq instruction. That is,
each flag that is set in either operand will be set in the destination
operand.
- The most efficient way to load a register with the value of zero is to
“exclusive or” it with itself. This is fast because the instruction can be
encoded with a smaller number of bytes. So, to load zero into %rax
efficiently, you can do xorq %rax, %rax. However, be aware that this
does set flags.
All these instructions (except notq) set flags, with the zero flag (ZF) being the most
important.
